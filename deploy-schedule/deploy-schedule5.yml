name: Deploy Schedule

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: windows-latest

    env:
      API_KEY: API-
      BASE_URL: https://octopusdeploy-dev.healthspring.inside/
      PROJECT_ID: Projects-243
      SPACE_ID: Spaces-1
      ENVIRONMENT_ID: Environments-2
      PROJECT_NAME: Octopus-Test

    steps:
      - name: ‚¨á Checkout repository
        uses: actions/checkout@v3

      - name: üêç Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: üîÑ Load environment variables
        run: |
          python -m pip install python-dotenv
          echo "Loaded .env (if exists)"

      - name: üïí Set version
        run: |
          echo "PACKAGE_VERSION=$(Get-Date -Format 'yyyy.MM.dd').${{ github.run_number }}" >> $env:GITHUB_ENV

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üß™ Run unit tests
        run: python -m unittest discover -s tests

      - name: üìÅ Create artifacts folder
        run: |
          mkdir -Force artifacts\TestApp

      - name: üìÇ Copy application files
        run: |
          Copy-Item -Recurse -Force test_app\* artifacts\TestApp\

      - name: üîß Install Octopus CLI
        run: |
          Invoke-WebRequest -Uri "https://github.com/OctopusDeploy/OctopusCLI/releases/download/v9.1.7/OctopusTools.9.1.7.win-x64.zip" -OutFile "OctopusTools.zip"
          Expand-Archive -Path "OctopusTools.zip" -DestinationPath "octo-cli"
          $env:PATH = "$PWD\octo-cli;$env:PATH"
          octo help

      - name: üöÄ Deploy to Octopus via PowerShell
        shell: pwsh
        run: |
          $API_KEY = "${{ env.API_KEY }}"
          $BASE_URL = "${{ env.BASE_URL }}"
          $PROJECT_ID = "${{ env.PROJECT_ID }}"
          $SPACE_ID = "${{ env.SPACE_ID }}"
          $ENVIRONMENT_ID = "${{ env.ENVIRONMENT_ID }}"

          $headers = @{
            "X-Octopus-ApiKey" = $API_KEY
            "Content-Type" = "application/json"
          }

          $channelUrl = "$BASE_URL/api/projects/$PROJECT_ID/channels"
          $channelResp = Invoke-RestMethod -Uri $channelUrl -Headers $headers -Method Get -SkipCertificateCheck
          $channelId = $channelResp.Items[0].Id
          Write-Host "Channel ID: $channelId"

          $releaseUrl = "$BASE_URL/api/$SPACE_ID/releases/create/v1"
          $releasePayload = @{
            Version = "0.37"
            ProjectID = $PROJECT_ID
            ChannelID = $channelId
            SpaceID = $SPACE_ID
            ProjectName = "${{ env.PROJECT_NAME }}"
            SpaceIdOrName = $SPACE_ID
          } | ConvertTo-Json -Depth 10

          $releaseResp = Invoke-RestMethod -Uri $releaseUrl -Headers $headers -Method Post -Body $releasePayload -SkipCertificateCheck
          Write-Host "Release created: $($releaseResp.Id)"

          $releasesUrl = "$BASE_URL/api/projects/$PROJECT_ID/releases"
          $releasesResp = Invoke-RestMethod -Uri $releasesUrl -Headers $headers -Method Get -SkipCertificateCheck
          $releaseId = $releasesResp.Items[0].Id
          Write-Host "Latest Release ID: $releaseId"

          $queueTime = (Get-Date).ToUniversalTime().AddMinutes(5).ToString("yyyy-MM-ddTHH:mm:ssZ")
          $queueExpiry = (Get-Date).ToUniversalTime().AddMinutes(65).ToString("yyyy-MM-ddTHH:mm:ssZ")

          $deployUrl = "$BASE_URL/api/$SPACE_ID/deployments"
          $deployPayload = @{
            ProjectId = $PROJECT_ID
            ReleaseId = $releaseId
            EnvironmentId = $ENVIRONMENT_ID
            ChannelId = $channelId
            QueueTime = $queueTime
            QueueTimeExpiry = $queueExpiry
          } | ConvertTo-Json -Depth 10

          $deployResp = Invoke-RestMethod -Uri $deployUrl -Headers $headers -Method Post -Body $deployPayload -SkipCertificateCheck
          Write-Host "Deployment triggered: $($deployResp.Id)"
