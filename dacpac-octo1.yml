name: Build SQL Pipeline

on:
  push:
    branches:
      - main
      - dev
  workflow_dispatch: # Allows manual triggering

env:
  ARTIFACTS_DIR: ${{ github.workspace }}/build/artifacts
  OCT_PACKAGE_NAME: EDS-Medicaid
  DACPACS: Medicaid.SQL
  PACKAGE_FORMAT: zip

jobs:
  build_sql:
    runs-on: windows-latest # Use Windows runner since batch commands are being used

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set Environment Variables
      run: |
        echo "SQL_OUT=${{ github.workspace }}\\build\\sql" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Create SQL Output Directory
      run: mkdir "${{ env.SQL_OUT }}"
      shell: cmd

    - name: Build DACPAC Projects
      run: |
        echo "*** Building changes from the branch ***"
        $dacpacs = "${{ env.DACPACS }}".Split(',')
        foreach ($project in $dacpacs) {
          echo "** Build DACPAC: $project **"
          $projectFile = "${{ github.workspace }}\\$project\\$project.sqlproj"
          $dacpac = "${{ github.workspace }}\\$project\\bin\\Debug\\$project.dacpac"
          $publishProfile = "${{ github.workspace }}\\$project\\$project.publish.xml"

          msbuild $projectFile -property:Configuration=Debug
          xcopy "$dacpac" "${{ env.SQL_OUT }}" /y
          xcopy "$publishProfile" "${{ env.SQL_OUT }}" /y
        }
      shell: pwsh

    - name: Install Octopus CLI
  run: |
    Invoke-WebRequest -Uri "https://download.octopusdeploy.com/octopus-tools/latest/OctopusTools.msi" -OutFile "OctopusTools.msi"
    Start-Process msiexec.exe -ArgumentList "/i OctopusTools.msi /quiet /norestart" -Wait
    octo version
  shell: pwsh

- name: Verify Octopus CLI Installation
  run: octo version
  shell: pwsh


    - name: Package Artifacts
      run: |
        octo pack --id=${{ env.OCT_PACKAGE_NAME }}.SQL --version=1.0.0 --outFolder=${{ env.ARTIFACTS_DIR }} --basePath=${{ env.SQL_OUT }} --format=${{ env.PACKAGE_FORMAT }}
      shell: cmd

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sql-artifacts
        path: ${{ env.ARTIFACTS_DIR }}


---

name: Build Pipeline

on:
  push:
    branches:
      - '**' # Trigger on all branches
  pull_request:
    branches:
      - '**'

jobs:
  preparation:
    runs-on: ubuntu-latest # Equivalent to agent any-agent
    
    env:
      BUILD_NUMBER: ${{ github.run_number }}
      
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Clean Workspace
        run: rm -rf * || true
        
      - name: Get Release Name
        run: |
          BRANCH="${{ github.ref }}"
          BRANCH_NAME=$(basename $BRANCH) # Get branch name without refs/heads/
          BUILD_NUMBER="${{ env.BUILD_NUMBER }}"
          
          if [[ "$BRANCH_NAME" == *"_"* ]]; then
            PREFIX="${BRANCH_NAME%%_*}"  # Text before _
            SUFFIX="${BRANCH_NAME#*_}"   # Text after _
            RELEASE_NAME="${PREFIX}-${BUILD_NUMBER}-${SUFFIX}"
          else
            RELEASE_NAME="${BRANCH_NAME}-${BUILD_NUMBER}"
          fi
          
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          
      - name: Print Release Name
        run: echo "Release Name: $RELEASE_NAME"

---

name: Windows Build Pipeline

on:
  push:
    branches:
      - '**' # Trigger on all branches
  pull_request:
    branches:
      - '**'

jobs:
  preparation:
    runs-on: windows-latest # Use Windows agent
    
    env:
      BUILD_NUMBER: ${{ github.run_number }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Clean Workspace
        run: |
          if (Test-Path -Path ".") {
            Get-ChildItem -Recurse | Remove-Item -Force -Recurse
          }
        shell: powershell

      - name: Get Release Name
        run: |
          $Branch = "${{ github.ref }}"
          $BranchName = ($Branch -split "/")[-1] # Extract branch name
          $BuildNumber = "${{ env.BUILD_NUMBER }}"
          
          if ($BranchName -like "*_*") {
            $Prefix = $BranchName.Split("_")[0]
            $Suffix = $BranchName.Split("_")[1]
            $ReleaseName = "${Prefix}-${BuildNumber}-${Suffix}"
          } else {
            $ReleaseName = "${BranchName}-${BuildNumber}"
          }
          
          echo "RELEASE_NAME=$ReleaseName" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: powershell

      - name: Print Release Name
        run: echo "Release Name: $env:RELEASE_NAME"
        shell: powershell
