name: Deployment Scheduler and Octopus Deploy

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
    
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'schedule'
        type: choice
        options:
          - schedule
          - deploy
      releaseNumber:
        description: 'Release number to deploy (only for deploy action)'
        required: false
      projectName:
        description: 'Project name in Octopus Deploy (only for deploy action)'
        required: false
      deploymentTime:
        description: 'Deployment time (YYYY-MM-DD HH:MM:SS) (only for deploy action)'
        required: false
permissions:
  id-token: write
  contents: read
  packages: write

env:
  # General environment settings
  ASPNETCORE_ENVIRONMENT: ${{ vars.ASPNETCORE_ENVIRONMENT || 'development' }}
  
  # ServiceNow configuration
  SNOW_BASE_URL: 'https://servicenowinstance.service-now.com'
  SNOW_QUERY_CHANGE_TASK_ENDPOINT: '/api/now/table/change_task'
  SNOW_UPDATE_CHANGE_TASK_ENDPOINT: '/api/now/table/change_task'
  SNOW_USERNAME: ${{ secrets.SNOW_USERNAME }}
  SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
  SNOW_AUTOMATION_USER_ID: ${{ secrets.SNOW_AUTOMATION_USER_ID }}
  SNOW_DEV_OPS_SOFTWARE_SOLUTIONS_ID: ${{ secrets.SNOW_DEV_OPS_SOFTWARE_SOLUTIONS_ID }}
  
  # Octopus Deploy configuration
  OCTOPUS_DEPLOY_BASE_URL: 'https://octopus.company.com'
  OCTOPUS_TASKS_ENDPOINT: '/api/tasks'
  OCTOPUS_RELEASE_ENDPOINT: '/api/releases'
  OCTOPUS_DEPLOYMENT_ENDPOINT: '/api/deployments'
  OCTOPUS_PROJECTS_ENDPOINT: '/api/projects/all'
  OCTOPUS_DEPLOY_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
  OCTOPUS_ENVIRONMENT_ID: ${{ secrets.OCTOPUS_ENVIRONMENT_ID }}

jobs:
  deployment-scheduler:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'schedule' || github.event.inputs.action == null
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Unassign tasks
        id: unassign
        run: |
          python -c "
          from sched.service_now import change_tasks, unassign
          from datetime import datetime
          import pytz
          
          print('--------------------')
          print(f\"PROCESS STARTED {datetime.now().astimezone(pytz.timezone('US/Central')).strftime('%Y-%m-%d %H:%M CST')}\")
          print(f\"ENVIRONMENT: ${{ env.ASPNETCORE_ENVIRONMENT }}\")
          
          # Unassign tasks assigned to AUTOOCTOPUS if not processed
          unassign(snow_items=change_tasks(assigned_to=True))
          
          print(f\"UNASSIGN {datetime.now().astimezone(pytz.timezone('US/Central')).strftime('%Y-%m-%d %H:%M CST')}\")
          print('--------------------')
          "

      - name: Get unassigned tasks and schedule
        id: schedule_tasks
        run: |
          python -c "
          from sched.service_now import change_tasks
          from sched.scheduler import schedule
          from datetime import datetime
          import pytz
          
          # Get tasks not assigned to AUTOOCTOPUS
          unassigned_tasks = change_tasks(assigned_to=False)
          print(f\"GET TASKS {datetime.now().astimezone(pytz.timezone('US/Central')).strftime('%Y-%m-%d %H:%M CST')}\")
          print('--------------------')
          
          # Schedule change tasks
          if len(unassigned_tasks) > 0:
              schedule(snow_items=unassigned_tasks)
          
          print(f\"SCHEDULE {datetime.now().astimezone(pytz.timezone('US/Central')).strftime('%Y-%m-%d %H:%M CST')}\")
          print('--------------------')
          "

      - name: Authorize deployments
        id: authorize_deployments
        run: |
          python -c "
          from sched.service_now import change_tasks
          from sched.octopus_deploy import queued_deployments, authorize_deployments
          from datetime import datetime
          import pytz
          
          # Get queued deployments from Octopus Deploy
          deployments = queued_deployments()
          print(f\"GET QUEUED DEPLOYMENTS {datetime.now().astimezone(pytz.timezone('US/Central')).strftime('%Y-%m-%d %H:%M CST')}\")
          print('--------------------')
          
          # Get tasks assigned to AUTOOCTOPUS
          assigned_tasks = change_tasks(assigned_to=True)
          print(f\"GET ASSIGNED TASKS {datetime.now().astimezone(pytz.timezone('US/Central')).strftime('%Y-%m-%d %H:%M CST')}\")
          print('--------------------')
          
          # Authorize deployments
          authorize_deployments(snow_items=assigned_tasks, deployments=deployments)
          print(f\"AUTHORIZE DEPLOYMENTS {datetime.now().astimezone(pytz.timezone('US/Central')).strftime('%Y-%m-%d %H:%M CST')}\")
          print('--------------------')
          
          print(f\"PROCESS FINISHED {datetime.now().astimezone(pytz.timezone('US/Central')).strftime('%Y-%m-%d %H:%M CST')}\")
          print('--------------------')
          "

  octopus-deploy:
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'deploy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Schedule Octopus Deployment
        run: |
          python -c "
          from sched.octopus_deploy import find_project_id, find_release, schedule_release, to_central_time
          import os
          import logging
          
          # Setup logging
          logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
          logger = logging.getLogger(__name__)
          
          release_number = '${{ github.event.inputs.releaseNumber }}'
          project_name = '${{ github.event.inputs.projectName }}'
          deployment_time = '${{ github.event.inputs.deploymentTime }}'
          
          logger.info(f'Scheduling deployment for release {release_number} of project {project_name}')
          
          # Find project ID based on project name
          project_id = find_project_id(project_name)
          if not project_id:
              logger.error(f'Project {project_name} not found')
              exit(1)
              
          # Find release based on release number and project ID
          release = find_release(release_number, project_id)
          if not release:
              logger.error(f'Release {release_number} not found for project {project_name}')
              exit(1)
              
          # Schedule deployment
          deployment_resource = {
              'ReleaseId': release['Id'],
              'ProjectId': project_id,
              'ChannelId': release['ChannelId'],
              'EnvironmentId': os.environ.get('OCTOPUS_ENVIRONMENT_ID'),
              'QueueTime': to_central_time(deployment_time, False),
              'QueueTimeExpiry': to_central_time(deployment_time, True)
          }
          
          result = schedule_release(deployment_resource)
          if result:
              logger.info(f'Successfully scheduled deployment for {release_number} of {project_name}')
          else:
              logger.error(f'Failed to schedule deployment')
              exit(1)
          "
