name: Deployment Scheduler and Octopus Deploy

on:
  schedule:
    - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'schedule'
        type: choice
        options:
          - schedule
          - deploy
      releaseNumber:
        description: 'Release number to deploy (only for deploy action)'
        required: false
      projectName:
        description: 'Project name in Octopus Deploy (only for deploy action)'
        required: false
      deploymentTime:
        description: 'Deployment time (YYYY-MM-DD HH:MM:SS) (only for deploy action)'
        required: false

env:
  ASPNETCORE_ENVIRONMENT: ${{ vars.ASPNETCORE_ENVIRONMENT || 'development' }}
  SNOW_BASE_URL: 'https://servicenowinstance.service-now.com'
  SNOW_QUERY_CHANGE_TASK_ENDPOINT: '/api/now/table/change_task'
  SNOW_UPDATE_CHANGE_TASK_ENDPOINT: '/api/now/table/change_task'
  SNOW_USERNAME: ${{ secrets.SNOW_USERNAME }}
  SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
  SNOW_AUTOMATION_USER_ID: ${{ secrets.SNOW_AUTOMATION_USER_ID }}
  SNOW_DEV_OPS_SOFTWARE_SOLUTIONS_ID: ${{ secrets.SNOW_DEV_OPS_SOFTWARE_SOLUTIONS_ID }}
  OCTOPUS_DEPLOY_BASE_URL: 'https://octopus.company.com'
  OCTOPUS_TASKS_ENDPOINT: '/api/tasks'
  OCTOPUS_RELEASE_ENDPOINT: '/api/releases'
  OCTOPUS_DEPLOYMENT_ENDPOINT: '/api/deployments'
  OCTOPUS_PROJECTS_ENDPOINT: '/api/projects/all'
  OCTOPUS_DEPLOY_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
  OCTOPUS_ENVIRONMENT_ID: ${{ secrets.OCTOPUS_ENVIRONMENT_ID }}

jobs:
  octopus-deploy:
    runs-on: windows-latest
    if: github.event.inputs.action == 'deploy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Find Project ID
        id: find_project
        shell: pwsh
        run: |
          $projectsResponse = Invoke-RestMethod -Uri "${{ env.OCTOPUS_DEPLOY_BASE_URL }}${{ env.OCTOPUS_PROJECTS_ENDPOINT }}?take=999" `
            -Headers @{ "X-Octopus-ApiKey" = "${{ env.OCTOPUS_DEPLOY_API_KEY }}" }

          $project = $projectsResponse.Items | Where-Object { $_.Name -eq "${{ github.event.inputs.projectName }}" }

          if (-not $project) {
            Write-Error "Project '${{ github.event.inputs.projectName }}' not found"
            exit 1
          }

          echo "project_id=$($project.Id)" >> $env:GITHUB_OUTPUT
          echo "Found project ID: $($project.Id)"

      - name: Find Release
        id: find_release
        shell: pwsh
        run: |
          $projectId = "${{ steps.find_project.outputs.project_id }}"
          $releasesResponse = Invoke-RestMethod -Uri "${{ env.OCTOPUS_DEPLOY_BASE_URL }}/api/projects/$projectId/releases?take=999" `
            -Headers @{ "X-Octopus-ApiKey" = "${{ env.OCTOPUS_DEPLOY_API_KEY }}" }

          $release = $releasesResponse.Items | Where-Object { $_.Version -eq "${{ github.event.inputs.releaseNumber }}" }

          if (-not $release) {
            Write-Error "Release '${{ github.event.inputs.releaseNumber }}' not found"
            exit 1
          }

          echo "release_id=$($release.Id)" >> $env:GITHUB_OUTPUT
          echo "channel_id=$($release.ChannelId)" >> $env:GITHUB_OUTPUT
          echo "Found release ID: $($release.Id)"

      - name: Prepare Deployment Times
        id: prepare_times
        shell: pwsh
        run: |
          $deployTime = Get-Date "${{ github.event.inputs.deploymentTime }}"
          $queueTime = $deployTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssK")
          $queueTimeExpiry = $deployTime.AddMinutes(30).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssK")

          echo "queue_time=$queueTime" >> $env:GITHUB_OUTPUT
          echo "queue_time_expiry=$queueTimeExpiry" >> $env:GITHUB_OUTPUT

      - name: Schedule Deployment
        id: schedule_deployment
        shell: pwsh
        run: |
          $body = @{
            ReleaseId = "${{ steps.find_release.outputs.release_id }}"
            ProjectId = "${{ steps.find_project.outputs.project_id }}"
            ChannelId = "${{ steps.find_release.outputs.channel_id }}"
            EnvironmentId = "${{ env.OCTOPUS_ENVIRONMENT_ID }}"
            QueueTime = "${{ steps.prepare_times.outputs.queue_time }}"
            QueueTimeExpiry = "${{ steps.prepare_times.outputs.queue_time_expiry }}"
          } | ConvertTo-Json -Depth 10

          $response = Invoke-RestMethod -Uri "${{ env.OCTOPUS_DEPLOY_BASE_URL }}${{ env.OCTOPUS_DEPLOYMENT_ENDPOINT }}" `
            -Method POST -Headers @{ "X-Octopus-ApiKey" = "${{ env.OCTOPUS_DEPLOY_API_KEY }}" } `
            -ContentType "application/json" -Body $body

          if (-not $response.Id) {
            Write-Error "Failed to schedule deployment: $($response.ErrorMessage)"
            exit 1
          }

          echo "deployment_id=$($response.Id)" >> $env:GITHUB_OUTPUT
          echo "Successfully scheduled deployment (ID: $($response.Id))"
