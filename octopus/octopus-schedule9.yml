name: Octopus Deploy GitHub Actions Workflow

on:
  push:
    branches: [main, master]
    paths-ignore:
      - '**.md'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (leave empty for auto-versioning)'
        required: false
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'Development'
        type: choice
        options:
          - Development
          - Test
          - Production
      project:
        description: 'Project name in Octopus Deploy'
        required: true
      release_notes:
        description: 'Release notes for this deployment'
        required: false

permissions:
  id-token: write
  contents: read
  packages: write

env:
  OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER_URL }}
  OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
  OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE_NAME }}
  PACKAGE_NAME: 'deployment-scheduler'

jobs:
  build-and-push:
    runs-on: zilverton-private-x64-windows-2025
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Generate version
        id: generate_version
        run: |
          if [ "${{ github.event.inputs.version }}" == "" ]; then
            VERSION="1.0.${{ github.run_number }}"
          else
            VERSION="${{ github.event.inputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Create Octopus package
        id: package
        run: |
          mkdir -p artifacts
          zip -r "artifacts/${{ env.PACKAGE_NAME }}.${{ steps.generate_version.outputs.version }}.zip" . -x "*.git*" "artifacts/*"

      - name: Push package to Octopus Deploy
        uses: OctopusDeploy/push-package-action@v3
        with:
          api_key: ${{ env.OCTOPUS_API_KEY }}
          server: ${{ env.OCTOPUS_SERVER }}
          space: ${{ env.OCTOPUS_SPACE }}
          packages: "artifacts/${{ env.PACKAGE_NAME }}.${{ steps.generate_version.outputs.version }}.zip"

      - name: Create Octopus release
        uses: OctopusDeploy/create-release-action@v3
        id: create_release
        with:
          api_key: ${{ env.OCTOPUS_API_KEY }}
          server: ${{ env.OCTOPUS_SERVER }}
          space: ${{ env.OCTOPUS_SPACE }}
          project: ${{ github.event.inputs.project }}
          release_number: ${{ steps.generate_version.outputs.version }}
          package_version: ${{ steps.generate_version.outputs.version }}
          release_notes: ${{ github.event.inputs.release_notes }}

      - name: Deploy Octopus release
        uses: OctopusDeploy/deploy-release-action@v3
        with:
          api_key: ${{ env.OCTOPUS_API_KEY }}
          server: ${{ env.OCTOPUS_SERVER }}
          space: ${{ env.OCTOPUS_SPACE }}
          project: ${{ github.event.inputs.project }}
          release_number: ${{ steps.create_release.outputs.release_number }}
          environments: ${{ github.event.inputs.environment }}

      - name: Report deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment of ${{ steps.create_release.outputs.release_number }} to ${{ github.event.inputs.environment }} was successful"
          else
            echo "Deployment failed. Please check the Octopus Deploy server for more details."
