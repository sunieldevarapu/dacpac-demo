name: Deploy Octopus Test

on:
  # schedule:
  #   - cron: '0 * * * *'  # Runs every hour
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'schedule'
        type: choice
        options:
          - schedule
          - deploy
      releaseNumber:
        description: 'Release number to deploy (only for deploy action)'
        required: false
      projectName:
        description: 'Project name in Octopus Deploy (only for deploy action)'
        required: false
      deploymentTime:
        description: 'Deployment time (YYYY-MM-DD HH:MM:SS) (only for deploy action)'
        required: false

permissions:
  id-token: write
  contents: read
  packages: write

env:
  ASPNETCORE_ENVIRONMENT: ${{ vars.ASPNETCORE_ENVIRONMENT || 'development' }}
  SNOW_BASE_URL: 'https://cignadev1.service-now.com'
  SNOW_QUERY_CHANGE_TASK_ENDPOINT: '/api/now/table/change_task'
  SNOW_UPDATE_CHANGE_TASK_ENDPOINT: '/api/now/table/change_task'
  SNOW_USERNAME: ${{ secrets.SNOW_USERNAME }}
  SNOW_PASSWORD: ${{ secrets.SNOW_PASSWORD }}
  SNOW_AUTOMATION_USER_ID: ${{ secrets.SNOW_AUTOMATION_USER_ID }}
  SNOW_DEV_OPS_SOFTWARE_SOLUTIONS_ID: ${{ secrets.SNOW_DEV_OPS_SOFTWARE_SOLUTIONS_ID }}
  OCTOPUS_DEPLOY_BASE_URL: 'https://octopusdeploy-dev.healthspring.inside'
  OCTOPUS_TASKS_ENDPOINT: '/api/tasks'
  OCTOPUS_RELEASE_ENDPOINT: '/api/releases'
  OCTOPUS_DEPLOYMENT_ENDPOINT: '/api/deployments'
  OCTOPUS_PROJECTS_ENDPOINT: '/api/projects/all'
  OCTOPUS_DEPLOY_API_KEY: ${{ secrets.OCTOPUS_DEPLOY_API_KEY }}
  OCTOPUS_ENVIRONMENT_ID: ${{ secrets.OCTOPUS_ENVIRONMENT_ID }}

jobs:
  octopus-deploy:
    runs-on: zilverton-private-x64-windows-2025
    if: github.event.inputs.action == 'deploy'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Octopus CLI üêô
        uses: OctopusDeploy/install-octopus-cli-action@v3
        with:
          version: '*'

      - name: List All Projects
        id: list_projects
        shell: pwsh
        run: |
          echo "Listing all project names:"
          
          # Define the endpoint directly with values
          $endpoint = "https://octopusdeploy-dev.healthspring.inside/api/projects?take=999"
          
          # Query Octopus Deploy for all projects, skipping certificate verification
          $PROJECTS_RESPONSE = Invoke-RestMethod -Uri $endpoint `
            -Headers @{ "X-Octopus-ApiKey" = "API-7NSWFSQMKHQVNJ4IH9SZRGR5IQYUJ" } `
            -SkipCertificateCheck
          
          # List all project names
          $PROJECTS_RESPONSE.Items | Select-Object -ExpandProperty Name
      - name: Get Project ID
        id: get_project
        shell: pwsh
        run: |
          echo "Getting details for project ID: Projects-184"
          
          # Define the endpoint directly with values
          $endpoint = "https://octopusdeploy-dev.healthspring.inside/api/projects?take=999"
          
          # Query Octopus Deploy for all projects, skipping certificate verification
          $PROJECTS_RESPONSE = Invoke-RestMethod -Uri $endpoint `
            -Headers @{ "X-Octopus-ApiKey" = "API-7NSWFSQMKHQVNJ4IH9SZRGR5IQYUJ" } `
            -SkipCertificateCheck
          
          # Extract project details by filtering for the project ID
          $PROJECT_DETAILS = $PROJECTS_RESPONSE.Items | Where-Object { $_.Id -eq "Projects-184" }
          
          if (-Not $PROJECT_DETAILS) {
            Write-Error "Project with ID Projects-184 not found"
            exit 1
          }
          
          echo "Project Details: $PROJECT_DETAILS"
      - name: Get Project Name
        id: get_project_name
        shell: pwsh
        run: |
          echo "Getting project name for project ID: Projects-184"
          
          # Define the endpoint directly with values
          $endpoint = "https://octopusdeploy-dev.healthspring.inside/api/projects?take=999"
          
          # Query Octopus Deploy for all projects, skipping certificate verification
          $PROJECTS_RESPONSE = Invoke-RestMethod -Uri $endpoint `
            -Headers @{ "X-Octopus-ApiKey" = "API-7NSWFSQMKHQVNJ4IH9SZRGR5IQYUJ" } `
            -SkipCertificateCheck
          
          # Extract project name by filtering for the project ID
          $PROJECT_NAME = $PROJECTS_RESPONSE.Items | Where-Object { $_.Id -eq "Projects-184" } | Select-Object -ExpandProperty Name
          
          if (-Not $PROJECT_NAME) {
            Write-Error "Project with ID Projects-184 not found"
            exit 1
          }
          
          echo "Project Name: $PROJECT_NAME"
          echo "::set-output name=project_name::$PROJECT_NAME"
      - name: Get Release ID
        id: get_release
        shell: pwsh
        run: |
          echo "Getting release ID for project ID: Projects-184"
          
          # Define the endpoint for releases
          $releasesEndpoint = "https://octopusdeploy-dev.healthspring.inside/api/projects/Projects-184/releases"
          
          # Query Octopus Deploy for releases of the specified project, skipping certificate verification
          $RELEASES_RESPONSE = Invoke-RestMethod -Uri $releasesEndpoint `
            -Headers @{ "X-Octopus-ApiKey" = "API-7NSWFSQMKHQVNJ4IH9SZRGR5IQYUJ" } `
            -SkipCertificateCheck
          
          # Check if there are any releases
          if (-Not $RELEASES_RESPONSE.Items) {
            Write-Error "No releases found for project ID Projects-184"
            exit 1
          }
          
          # Get the latest release ID
          $LATEST_RELEASE_ID = $RELEASES_RESPONSE.Items[0].Id
          
          echo "Latest release ID: $LATEST_RELEASE_ID"
      - name: Get Channel ID
        id: get_channel
        shell: pwsh
        run: |
          echo "Getting channel ID for project ID: Projects-184"
          
          # Define the endpoint for channels
          $channelsEndpoint = "https://octopusdeploy-dev.healthspring.inside/api/projects/Projects-184/channels"
          
          # Query Octopus Deploy for channels of the specified project, skipping certificate verification
          $CHANNELS_RESPONSE = Invoke-RestMethod -Uri $channelsEndpoint `
            -Headers @{ "X-Octopus-ApiKey" = "API-7NSWFSQMKHQVNJ4IH9SZRGR5IQYUJ" } `
            -SkipCertificateCheck
          
          # Check if there are any channels
          if (-Not $CHANNELS_RESPONSE.Items) {
            Write-Error "No channels found for project ID Projects-184"
            exit 1
          }
          
          # Get the first channel ID (or modify to get a specific channel if needed)
          $CHANNEL_ID = $CHANNELS_RESPONSE.Items[0].Id
          
          echo "Channel ID: $CHANNEL_ID"
      # - name: Get Environment ID
      #   id: get_environment
      #   run: |
      #     echo Getting environment ID for environment name: Development
          
      #     # Define the endpoint for environments
      #     $environmentsEndpoint = "https://octopusdeploy-dev.healthspring.inside/api/environments"
          
      #     # Query Octopus Deploy for all environments, skipping certificate verification
      #     $ENVIRONMENTS_RESPONSE = Invoke-RestMethod -Uri $environmentsEndpoint `
      #       -Headers @{ "X-Octopus-ApiKey" = "API-7NSWFSQMKHQVNJ4IH9SZRGR5IQYUJ" } `
      #       -SkipCertificateCheck
          
      #     # Extract environment ID by filtering for the environment name
      #     $ENVIRONMENT_ID = $ENVIRONMENTS_RESPONSE.Items | Where-Object { $_.Name -eq "Development" } | Select-Object -ExpandProperty Id
          
      #     if (-Not $ENVIRONMENT_ID) {
      #       Write-Error "Environment 'Development' not found"
      #       exit 1
      #     }
          
      #     echo Environment ID: $ENVIRONMENT_ID

      - name: Create Release
        id: create_release
        shell: pwsh
        run: |
          echo "Create Release for project ID: Projects-184"
          
          # Define the endpoint for releases
          $releasesEndpoint = "https://octopusdeploy-dev.healthspring.inside/api/Spaces-1/releases/create/v1"
          # Define release details
          $releaseDetails = @{
            Version = "0.37"
            ProjectID = "Projects-184"
            ChannelID = "Channels-184"
            SpaceID = "Spaces-1"
            ProjectName = "Liquibase - Deploy - Demo"
            SpaceIdOrName = "Spaces-1"
          }
          # Convert release details to JSON
          $releaseDetailsJson = $releaseDetails | ConvertTo-Json
          # Create release
          $RELEASE_RESPONSE = Invoke-RestMethod -Uri $releasesEndpoint `
            -Method Post `
            -Headers @{ "X-Octopus-ApiKey" = "API-7NSWFSQMKHQVNJ4IH9SZRGR5IQYUJ" } `
            -ContentType "application/json" `
            -Body $releaseDetailsJson `
            -SkipCertificateCheck
          echo "Release Response: $RELEASE_RESPONSE"
          
      - name: Prepare Deployment
        id: prepare_deployment
        shell: pwsh
        run: |
          echo "Preparing deployment for project ID: Projects-184"
          
          # Define the endpoint for deployments
          $deploymentsEndpoint = "https://octopusdeploy-dev.healthspring.inside/api/Spaces-1/deployments"
          
          # Define the deployment details
          $deploymentDetails = @{
            ProjectId = "Projects-184"
            ReleaseId = "Releases-640"  # Use the release ID obtained from the previous step
            EnvironmentId = "Environments-2"  # Replace with the actual environment ID
            ChannelId = "Channels-184"  # Use the channel ID obtained from the previous step
            QueueTime = "2025-05-14T21:55:00Z"  # Replace with the desired scheduled start time
            QueueTimeExpiry = "2025-05-14T22:55:00Z"  # Replace with the desired scheduled expiry time
          }
          
          # Convert deployment details to JSON
          $deploymentDetailsJson = $deploymentDetails | ConvertTo-Json
          
          # Prepare the deployment
          $DEPLOYMENT_RESPONSE = Invoke-RestMethod -Uri $deploymentsEndpoint `
            -Method Post `
            -Headers @{ "X-Octopus-ApiKey" = "API-7NSWFSQMKHQVNJ4IH9SZRGR5IQYUJ" } `
            -ContentType "application/json" `
            -Body $deploymentDetailsJson `
            -SkipCertificateCheck
          
          echo "Deployment Response: $DEPLOYMENT_RESPONSE"
